/*<----- Click this to Expand for Instructions
 * 
 * Exercise 11.5 - ASSIGNMENT 8 - EXCEPTION HANDLING FOR YOUR WORLD MAP
 * 
 * A nice quick one - go back to Assignment 6 (World Map). Add Exception Handling to your code via
 * a try-catch-finally statement.
 * 
 * You do not need to upload anything to Google Classroom. Simply call me over to check, and submit 
 * a 'blank' document (or nothing) to Google Classroom to help me keep track of who I have spoken
 * to.
 * 
 * If you've already implemented exception handling in that project, then that's fine - just call me
 * over to have a look and submit as above.
 * 
 */

import java.util.InputMismatchException;
import java.util.Scanner;

import CustomExceptions.IntegerOutOfRangeException;
/*
 * Exercise 9.5 - ASSIGNMENT 6 - A WORLD MAP
 * Viduni Weihena Epa
 * October 1 2019  
 *       _____________ _____________ _____________
 *      |   __________|_____________|__________   |
 *      |  |          |             |          |  |
 *      |  |          |             |          |  |
 *      |  |       ___|___       ___|___       |  |
 *      |  |      |   |   |     |   |   |      |  |
 *      |  |      |   |   |     |   |   |      |  |
 *      |__|______|___|___|_____| __|___|______|__|
 *      |  |      |   |   |     |   |   |      |  |
 *      |  |      |___|___|     |___|___|      |  |
 *      |  |          |             |          |  |
 *      |  |          |             |          |  |
 *      |  |       ___|___       ___|___       |  |
 *      |  |      |   |   |     |   |   |      |  |
 *      |__|______|___|___|_____|___|___|______|__|
 *      |  |      |   |   |     |   |   |      |  |
 *      |  |      |   |   |     |   |   |      |  |
 *      |  |      |___|___|     |___|___|      |  |
 *      |  |          |             |          |  |
 *      |  |          |             |          |  |
 *      |  |__________|_____________|__________|  |
 *      |_____________|_____________|_____________|
 */
public class E_Assignment8 {
	static Scanner scan = new Scanner(System.in);//create a scanner object

	public static void main (String args[]) {
		String [][] mapRow = new String[10][9];//array to hold all of the maps  		
		String[][]newRoomText = new String [][] {//first element refers to the roomID, second element refers to N,E,S, or W
			{"You can't move North!","You move East","You move South","You can't move West!"},//room 0
			{"You move North","You move East","You move South","You can't move West!"},//room 1
			{"You move North","You move East","You can't move South!","You can't move West!"},//room 2
			{"You can't move North!","You move East","You move South","You move West"},//room 3
			{"You move North","You move East","You move South","You move West"},//room 4
			{"You move North","You move East","You can't move that way","You move West"},//room 5
			{"You can't move North","You can't move East","You move South","You move West"},//room 6
			{"You move North","You can't move East","You move South","You move West"},//room 7
			{"You move North","You can't move East","You can't move South","You move West"},//room 8			
		};
		int[][]newRoom = new int [][] {//first element refers to the roomID, second element refers to N,E,S, or W
			{0,3,1,0},{0,4,2,0},{1,5,2,2},{3,6,4,0},{3,7,5,1},{4,8,5,2},{6,6,7,3},{6,7,8,4},{7,8,8,5}};
			//room 0   room 1    room 2    room 3    room 4    room 5    room 6    room 7    room 8

			drawBanner();//prints the intro header out to the user
			say("Type quit when you wish to quit");
			mapRow = getMaps(mapRow);//fills the 2D array declared and initialized above with the room screens
			int roomID = 0; // the number that corresponds with each room (going up down each coloumn NOT right to left)
			int directionID = 0; // N=0, E=1, S=2, W=3
			boolean redraw = true; //indicates user wants to continue
			boolean quit = false; //indicates user wants to quit
			String userChoice = "start"; // A string which accepts user input to determine if they input a valid direction

			while (quit == false) {//repeat this loop while the user does not want to quit

				if (redraw == true) {//if the map must be redrawn (the user has moved into a new room)
					say(mapRow, roomID);//print out the map of the room the user is currently in 
					say("What will you do?");//ask for user input
				}
				try {
					userChoice = scan.nextLine();//records user's input
					if (userChoice.toLowerCase().equals("quit")){//.toLowerCase() resets all the letters in the users input to be lowercase
						quit = true;//if the user enters 'quit' exit the loop
					}

					if (userChoice.contentEquals("N")||userChoice.contentEquals("E")||userChoice.contentEquals("S")||userChoice.contentEquals("W")) {//if the user enters N E S or W

						directionID	= getDirectionID(userChoice);//convert their letter direction into an int that corresponds to that direction
						say(newRoomText[roomID][directionID]);//print the approiate prompt out to the user (either the user has moved or they cannot move that way)
						if(newRoom[roomID][directionID]== roomID) {//if the user remains in the same room
							redraw = false;//do not redraw the same room
						} else {
							redraw = true;//else do redraw it
						}
						roomID = newRoom[roomID][directionID];		
					}	
					else {
						throw new D_CustomExceptions();
					}
				} catch(D_CustomExceptions error) {
					say("I did not understand your input.");
					say("Please enter either 'N', 'E', 'S' or 'W'");
				}


			}
	}
	public static String[][] getMaps(String[][] mapRow){ // Populates an Array containing all of the map information
		//room 0
		mapRow[0][0] =  ("  =================  ");//17x8 (room dimensions)
		mapRow[1][0] =  ("||   ______________||");
		mapRow[2][0] =  ("||  |              ||");
		mapRow[3][0] =  ("||  |   X       <E>||");
		mapRow[4][0] =  ("||  |       _______||");
		mapRow[5][0] =  ("||  |      |       ||");
		mapRow[6][0] =  ("||  |      |       ||");
		mapRow[7][0] =  ("||  | <S>  |       ||");
		mapRow[8][0] =  ("||  |      |_______||");
		mapRow[9][0] =  ("  =================  ");
		//room 1
		mapRow[0][1] =  ("  =================  ");
		mapRow[1][1] =  ("||   ______________||");
		mapRow[2][1] =  ("||  |  <N> |       ||");
		mapRow[3][1] =  ("||  |      |_______||");
		mapRow[4][1] =  ("||  |              ||");
		mapRow[5][1] =  ("||  |   X     <E>  ||");
		mapRow[6][1] =  ("||  |       _______||");
		mapRow[7][1] =  ("||  |      |       ||");
		mapRow[8][1] =  ("||  |  <S> |_______||");
		mapRow[9][1] =  ("  =================  ");
		//room 2
		mapRow[0][2] =  ("  =================  ");
		mapRow[1][2] =  ("||  | <N>  |       ||");
		mapRow[2][2] =  ("||  |      |       ||");
		mapRow[3][2] =  ("||  |      |       ||");
		mapRow[4][2] =  ("||  |      |_______||");
		mapRow[5][2] =  ("||  |              ||");
		mapRow[6][2] =  ("||  |   X       <E>||");
		mapRow[7][2] =  ("||  |______________||");
		mapRow[8][2] =  ("||                 ||");
		mapRow[9][2] =  ("  =================  ");
		//room 3
		mapRow[0][3] =  ("  =================  ");
		mapRow[1][3] =  ("||_________________||");
		mapRow[2][3] =  ("||                 ||");
		mapRow[3][3] =  ("|| <W>    X     <E>||");
		mapRow[4][3] =  ("||_____        ____||");
		mapRow[5][3] =  ("||     |      |    ||");
		mapRow[6][3] =  ("||     |      |    ||");
		mapRow[7][3] =  ("||     |  <S> |    ||");
		mapRow[8][3] =  ("||     |      |____||");
		mapRow[9][3] =  ("  =================  ");
		//room 4
		mapRow[0][4] =  ("  =================  ");
		mapRow[1][4] =  ("||____         ____||");
		mapRow[2][4] =  ("||    |  <N>  |    ||");
		mapRow[3][4] =  ("||____|       |____||");
		mapRow[4][4] =  ("||                 ||");
		mapRow[5][4] =  ("||<W>     X    <E> ||");
		mapRow[6][4] =  ("||____         ____||");
		mapRow[7][4] =  ("||    |       |    ||");
		mapRow[8][4] =  ("||    |  <S>  |____||");
		mapRow[9][4] =  ("  =================  ");
		//room 5
		mapRow[0][5] =  ("  =================  ");
		mapRow[1][5] =  ("||    |  <N>  |    ||");
		mapRow[2][5] =  ("||    |       |    ||");
		mapRow[3][5] =  ("||    |       |    ||");
		mapRow[4][5] =  ("||____|       |____||");
		mapRow[5][5] =  ("||                 ||");
		mapRow[6][5] =  ("|| <W>    X     <E>||");
		mapRow[7][5] =  ("||_________________||");
		mapRow[8][5] =  ("||                 ||");
		mapRow[9][5] =  ("  =================  ");
		//room 6
		mapRow[0][6] =  ("  =================  ");
		mapRow[1][6] =  ("||______________   ||");
		mapRow[2][6] =  ("||              |  ||");
		mapRow[3][6] =  ("|| <W>      X   |  ||");
		mapRow[4][6] =  ("||_______       |  ||");
		mapRow[5][6] =  ("||       |      |  ||");
		mapRow[6][6] =  ("||       |      |  ||");
		mapRow[7][6] =  ("||       |      |  ||");
		mapRow[8][6] =  ("||       | <S>  |  ||");
		mapRow[9][6] =  ("  =================  ");
		//room 7
		mapRow[0][7] =  ("  =================  ");
		mapRow[1][7] =  ("||____          |  ||");
		mapRow[2][7] =  ("||    |   <N>   |  ||");
		mapRow[3][7] =  ("||____|         |  ||");
		mapRow[4][7] =  ("||              |  ||");
		mapRow[5][7] =  ("||<W>      X    |  ||");
		mapRow[6][7] =  ("||____          |  ||");
		mapRow[7][7] =  ("||    |         |  ||");
		mapRow[8][7] =  ("||    |   <S>   |  ||");
		mapRow[9][7] =  ("  =================  ");
		//room 8
		mapRow[0][8] =  ("  =================  ");
		mapRow[1][8] =  ("||       | <N>  |  ||");
		mapRow[2][8] =  ("||       |      |  ||");
		mapRow[3][8] =  ("||       |      |  ||");
		mapRow[4][8] =  ("||_______|      |  ||");
		mapRow[5][8] =  ("||              |  ||");
		mapRow[6][8] =  ("|| <W>      X   |  ||");
		mapRow[7][8] =  ("||______________|  ||");
		mapRow[8][8] =  ("||                 ||");
		mapRow[9][8] =  ("  =================  ");
		return mapRow;
	}

	public static int getDirectionID (String userInput) {//returns an integer value that corresponds with the direction the user wants to move in
		int directionID=0;
		if (userInput.equals("N")) {//if the user wants to move N
			directionID = 0;
		} else if (userInput.equals("E")) {//if the user wants to move E
			directionID = 1;
		} else if (userInput.equals("S")) {//if the user wants to move S
			directionID = 2;
		} else if (userInput.equals("W")) {//if the user wants to move W
			directionID = 3;
		}
		return directionID;
	}

	public static void drawBanner() { // draws a little banner as an introductory graphic when the game loads
		say(" __________________________________ ");
		say("|                                  |");
		say("|            ICS 4U1 RPG           |");
		say("|__________________________________|");
		say("                                    ");
	}

	public static void say(String prompt) {//shortcut for System.out.println()
		System.out.println(prompt);
	}

	public static void say(String [][] prompt, int column) {//say method to print out a specific element(one map) from the 2D array of the map
		for (int i =0; i < prompt.length; i++) {
			System.out.println(prompt[i][column]);
		}
	}
}
